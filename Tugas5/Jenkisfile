def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]

pipeline {
    agent {
        label 'build-agent'
    }

    environment {
        DOCKER_IMAGE = "sigler05/weather_app_${BUILD_ID}"
        K8S_CONFIG_PATH = "/path/to/kubeconfig"  // Ubah ke lokasi file kubeconfig Anda
    }

    stages {

        stage('Build') {
            steps {
                sh 'docker compose up -d'
            }
        }

        stage('UNIT TEST') {
            steps {
                sh 'python3 ~/workspace/weather_app/app/test.py'
            }
        }

        stage('Delivery') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'dockerhubpwd')]) {
                        sh 'docker login -u sigler05 -p ${dockerhubpwd}'
                    }
                    sh """
                        docker tag weather_app_app ${DOCKER_IMAGE}
                        docker push ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            agent {
                label 'deploy-agent'
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'k8s-config', variable: 'KUBECONFIG_FILE')]) {
                        sh "export KUBECONFIG=${KUBECONFIG_FILE} && kubectl apply -f k8s/deployment.yaml"
                        sh "export KUBECONFIG=${KUBECONFIG_FILE} && kubectl apply -f k8s/service.yaml"
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                    docker compose down
                    docker system prune -a --volumes -f
                '''
            }
        }
    }

    post {
        success {
            slackSend channel: '#succeeded-build',
            color: COLOR_MAP[currentBuild.currentResult],
            message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL} \n ${currentBuild.getBuildCauses()[0].shortDescription}"    
        }
        failure {
            slackSend failOnError: true, channel: '#devops-alerts',
            color: COLOR_MAP[currentBuild.currentResult],
            message: "Build failed  - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>) \n ${currentBuild.getBuildCauses()[0].shortDescription}"
        }
        always {
            sh '''
                docker compose down
                docker rmi -f $(docker images -aq)
            '''
            cleanWs()
            dir("${env.WORKSPACE}@tmp") {
                deleteDir()
            }
            dir("${env.WORKSPACE}@script") {
                deleteDir()
            }
            dir("${env.WORKSPACE}@script@tmp") {
                deleteDir()
            }
        }
    }    
}
